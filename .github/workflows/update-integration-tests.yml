name: Update integration tests

on:
  push:
    branches:
      - master
    paths:
      - docs/test/integration/*/*/pull/*/index.md

jobs:
  update-commit-status:
    runs-on: ubuntu-latest
    name: Update commit status
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
        with:
          ref: master
          fetch-depth: 0

      - name: Get changed files
        run: |
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }}..${{ github.event.after }})
          CHANGED_INDEX_FILES=$(echo "$CHANGED_FILES" | grep "docs/test/integration/.*/.*/pull/.*/index.md")
          echo "$CHANGED_INDEX_FILES"
          echo "CHANGED_INDEX_FILES=$CHANGED_INDEX_FILES" >> $GITHUB_ENV

      - name: Update commit status
        env:
          GITHUB_USERNAME: ThomasSousa96
          GITHUB_PASSWORD: ${{ secrets.ACCESS_TOKEN }}
        shell: python
        run: |
          import os, sys, re, requests, json
          from requests.auth import HTTPBasicAuth

          status_descriptions = {
            'pending': 'Pending integration tests',
            'success': 'Successful integration tests',
            'failure': 'Failed integration tests',
            'error': 'Error to run integration tests',
          }

          paths = os.environ.get("CHANGED_INDEX_FILES").splitlines()
          for path in paths:
            print(f"Changed file: {path}")

            path_search = re.search(r"^docs/test/integration/(.*)/pull/(.*)/index.md$", path)
            if not path_search:
              print(f"::error::Invalid file path")
              sys.exit(1)

            repo = path_search.group(1)
            pull_request_number = path_search.group(2)

            with open (path, "r" ) as f:
              file_content = f.read()
              status_search = re.search(r"(?s)^##\s+Status\n\s*(.*?)\s*^#", file_content, flags = re.M)

              if not status_search:
                print("::error::Not found status section.")
                sys.exit(1)

              statuses = status_search.group(1)
              active_statuses = re.findall(r"^:.*: (Pending|Success|Failure|Error)$", statuses, flags = re.M)

              if len(active_statuses) == 0:
                print("::error::None active status. One status must be active.")
                sys.exit(1)
              elif len(active_statuses) > 1:
                print(f"::error::Multiple active status: {active_statuses}. Only one status must be active.")
                sys.exit(1)
              else:
                active_status = active_statuses[0].lower()
                target_url = os.environ.get("RESULT_PAGE_BASE_URL") + f"docs/test/integration/{repo}/pull/{pull_request_number}"

                print(f"Active status: {active_status}")

                print("Getting head commit SHA...")
                response = requests.get(f"https://api.github.com/repos/{repo}/pulls/{pull_request_number}",
                  auth=HTTPBasicAuth(os.environ.get("GITHUB_USERNAME"), os.environ.get("GITHUB_PASSWORD"))
                )

                print("::group::Github API response")
                print(f"Status: {response.status_code}\nHeaders:")
                print(json.dumps(dict(response.headers), indent=4))
                print("\nBody:")
                print(json.dumps(response.json(), indent=4))
                print("::endgroup::")
                print("\n")

                if response.status_code != 200:
                  print(f"::error::Expected response status 200, but it was {response.status_code}")
                  sys.exit(result.returncode)

                sha = response.json().get("head").get("sha")
                print(f"Head commit SHA: {sha}\n")

                print("Updating commit status...")
                response = requests.post(f"https://api.github.com/repos/{repo}/statuses/{sha}",
                  auth=HTTPBasicAuth(os.environ.get("GITHUB_USERNAME"), os.environ.get("GITHUB_PASSWORD")),
                  headers={
                    "Content-Type": "application/json"
                  },
                  json = {
                    "description": status_descriptions[active_status],
                    "state": active_status,
                    "context": "test/integration",
                    "target_url": target_url,
                  }
                )

                print("::group::Github API response")
                print(f"Status: {response.status_code}\nHeaders:")
                print(json.dumps(dict(response.headers), indent=4))
                print("\nBody:")
                print(json.dumps(response.json(), indent=4))
                print("::endgroup::")
                print("\n")

                if response.status_code != 201:
                  print(f"::error::Expected response status 201, but it was {response.status_code}")
                  sys.exit(result.returncode)
